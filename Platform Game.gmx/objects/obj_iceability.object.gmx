<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_iceability</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = 0;

turnspeed = 60;
movespeed = 15;

hsp = 0;
vsp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control the ice ability

image_angle += turnspeed;

if gravity = 0 &amp;&amp; obj_controller.gameover = false
{
    input_right = keyboard_check(ord('D')) or keyboard_check(vk_right);
    input_left = keyboard_check(ord('A')) or keyboard_check(vk_left);
    input_up = keyboard_check(ord('W')) or keyboard_check(vk_up);
    input_down = keyboard_check(ord('S')) or keyboard_check(vk_down);
    
    hsp = movespeed*(-input_left+input_right);
    vsp = movespeed*(-input_up+input_down); 
    
    if gamepad_is_connected(0)
    {
        hsp = movespeed*gamepad_axis_value(0,gp_axislh);
        vsp = movespeed*gamepad_axis_value(0,gp_axislv);
    }
    
    gamepad_set_vibration(0,0.3,0.3);
}
else
{
 obj_player.canmove = true;
 gamepad_set_vibration(0,0,0);
 hsp = 0;
 vsp = 0;
}

x += hsp;
y += vsp;

dir += 5;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with ghosts

collision_ghost = instance_place(x,y,obj_ghost);
 
if collision_ghost &amp;&amp; collision_ghost.dead = false &amp;&amp; obj_controller.gameover = false 
{
    if collision_ghost.dead = false 
    {
        if obj_controller.gameover = false &amp;&amp; collision_ghost.dead = false
        {
            obj_controller.score += collision_ghost.worth;
            collision_ghost.dead = true;     
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with pinkfish

collision_pinkfish = instance_place(x,y,obj_pinkfish);
 
if collision_pinkfish &amp;&amp; collision_pinkfish.dead = false &amp;&amp; obj_controller.gameover = false
{
    if collision_pinkfish.dead = false
    {
        if obj_controller.gameover = false &amp;&amp; collision_pinkfish.dead = false
        {
            obj_controller.score += collision_pinkfish.worth;
            collision_pinkfish.dead = true;     
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with Block Flashing

collision_blockflashing = instance_place(x,y,obj_blockflashing);
 
if collision_blockflashing &amp;&amp; obj_controller.gameover = false 
{
    instance_create(collision_blockflashing.x, collision_blockflashing.y, obj_blockfrozen);
    with(collision_blockflashing) instance_destroy();
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with Block Frozen

collision_blockfrozen = instance_place(x,y,obj_blockfrozen);
 
if collision_blockfrozen &amp;&amp; obj_controller.gameover = false 
{
    collision_blockfrozen.freezetime = 120;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with bouncers

collision_bouncer = instance_place(x,y,obj_bouncer);
 
if collision_bouncer &amp;&amp; collision_bouncer.dead = false &amp;&amp; obj_controller.gameover = false 
{
    if collision_bouncer.dead = false 
    {
        if obj_controller.gameover = false &amp;&amp; collision_bouncer.dead = false
        {
            obj_controller.score += collision_bouncer.worth;
            collision_bouncer.dead = true;     
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>35,35</point>
    <point>18,18</point>
  </PhysicsShapePoints>
</object>
